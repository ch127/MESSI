import matplotlib.pyplot as plt
import numpy as np

plt.rc('text', usetex=True)
plt.rc('font', family='serif', size=21)
plt.figure(figsize=(10, 6))

#margins(x=0,y=0,tight=false)
colors = ["#34495e", "#2ecc71","#e74c3c"]
methods = ["MESSI", "RNAalifold", "PPFold"]
nmethods = len(methods)

ourmethod = [[0.871429,0.855556,0.791667,0.87234,0.424242,0.469388,0.885714,0.901639,0.810811,0.54386,0.707317,0.830189,0.653333,0.640625,0.25,0.962264,0.663717,0.616667,0.857143,0.650052,0.677215,0.8],[0.67033,0.974684,0.76,0.854167,0.875,0.92,0.984127,0.632184,1.0,0.861111,0.852941,0.977778,0.720588,0.863158,1.0,0.85,0.986842,0.986667,0.934426,0.932936,0.896648,0.9],[0.757764,0.911243,0.77551,0.863158,0.571429,0.621622,0.932331,0.743243,0.895522,0.666667,0.773333,0.897959,0.685315,0.735426,0.4,0.902655,0.793651,0.758974,0.894118,0.766218,0.771635,0.847059],[0.799026,0.913142,0.775414,0.863125,0.64981,0.869229,0.933538,0.754774,0.900278,0.745638,0.776412,0.900844,0.686107,0.74356,0.512833,0.904267,0.820189,0.846034,0.894868,0.78281,0.782542,0.848217],[0.856172,0.958199,0.907464,0.966109,0.898204,0.826087,0.955414,0.853782,0.926316,0.902541,0.932933,0.927536,0.983661,0.862924,0.859813,0.902439,0.877076,0.909457,0.950019,0.857844,0.901629,0.910891],[0.935862,0.960994,0.990851,0.96281,0.868442,0.741615,0.982334,0.964381,0.957135,0.900679,0.973079,0.981573,0.990007,0.957374,0.976289,0.9384,0.908665,0.912356,0.992501,0.970572,0.978323,0.975636]]
ppfoldmethod = [[0.833333,0.888889,0.678571,0.930233,0.518519,0.533333,0.784314,0.903226,0.878788,0.507246,0.714286,0.913043,0.641791,0.637168,0.384615,0.959184,0.633929,0.591304,0.843972,0.676667,0.707263,0.9],[0.274725,0.607595,0.76,0.833333,0.875,0.96,0.634921,0.643678,0.966667,0.972222,0.735294,0.933333,0.632353,0.757895,1.0,0.783333,0.934211,0.906667,0.97541,0.907601,0.884078,0.9],[0.413223,0.721805,0.716981,0.879121,0.651163,0.685714,0.701754,0.751678,0.920635,0.666667,0.724638,0.923077,0.637037,0.692308,0.555556,0.862385,0.755319,0.715789,0.904943,0.775302,0.785847,0.9],[0.478003,0.73482,0.717784,0.880385,0.729712,0.941319,0.705344,0.762281,0.921548,0.833265,0.724353,0.923042,0.637021,0.694853,0.620066,0.866645,0.779975,0.797212,0.90724,0.787603,0.79429,0.899805],[0.611465,0.907114,0.897759,0.961801,0.934132,0.855072,0.889666,0.862097,0.947368,0.85,0.96359,0.949275,0.978004,0.875043,0.925234,0.882927,0.877229,0.918483,0.933099,0.881647,0.914646,0.948036],[0.686769,0.978488,0.979929,0.946776,0.892643,0.773913,0.976605,0.968688,0.987954,0.800823,0.991379,0.995859,0.991211,0.964409,0.986933,0.907906,0.918051,0.91182,0.980677,0.972837,0.980281,0.986022]]
rnaalifoldmethod = [[1.0,0.942857,1.0,0.967742,0.518519,0.547619,1.0,0.921053,1.0,0.75,0.84,1.0,0.705882,0.698246,1.0,0.987342,0.766667,0.666667,0.877049,0.76834,0.802632,0.897436],[0.318681,0.417722,0.48,0.625,0.875,0.92,0.603175,0.402299,0.7,0.583333,0.617647,0.888889,0.529412,0.698246,1.0,0.65,0.907895,0.72,0.877049,0.889717,0.851955,0.875],[0.483333,0.578947,0.648649,0.759494,0.651163,0.686567,0.752475,0.56,0.823529,0.65625,0.711864,0.941176,0.605042,0.698246,1.0,0.78392,0.831325,0.692308,0.877049,0.824586,0.826558,0.886076],[0.564164,0.62749,0.692609,0.777617,0.729712,0.938932,0.776448,0.608477,0.836454,0.763704,0.719994,0.942748,0.611281,0.69819,1.0,0.800898,0.834224,0.779392,0.876956,0.828927,0.831304,0.885927],[0.605096,0.856724,0.873786,0.906968,0.934076,0.876812,0.840764,0.744477,0.905263,0.945371,0.909848,0.963768,0.970497,0.888796,1.0,0.8,0.947739,0.960469,0.938609,0.927367,0.938935,0.930693],[0.692091,0.967024,0.952203,0.914241,0.903693,0.789493,0.9321,0.932748,0.979924,0.959729,0.970811,0.994462,0.988702,0.970155,1.0,0.861341,0.945473,0.935037,0.988362,0.982108,0.985524,0.981751]]

nstructures = len(ourmethod[1])
ciwidth = 10.0

offsetx = 0.0
xticklabelpos = []

metrics = ["Precision", "Recall", "F1 score", "MCC", "Mountain\nsimilarity"]
nmetrics = len(metrics)
for metric in range(nmetrics+1):
    if metric == 4:
        continue
    x = np.array([1.5*(i+1.0) for i in range(nmethods)])
    y = [np.mean(ourmethod[metric]), np.mean(ppfoldmethod[metric]), np.mean(rnaalifoldmethod[metric])]

    ourmethod5 = np.std(ourmethod[metric])
    ourmethod95 = np.std(ourmethod[metric])
    ppfoldmethod5 = np.std(ppfoldmethod[metric])
    ppfoldmethod95 = np.std(ppfoldmethod[metric])
    rnaalifold5 = np.std(rnaalifoldmethod[metric])
    rnaalifold95 = np.std(rnaalifoldmethod[metric])

    for (xi, yi) in zip(x,y):
      plt.text(xi+offsetx+0.06, 0.36, "%0.2f" % yi, fontsize=18, horizontalalignment="center", rotation=90.0)

    updownerror = [[ourmethod5, ppfoldmethod5, rnaalifold5], [ourmethod95, ppfoldmethod95, rnaalifold95]]
    b = plt.bar(x+offsetx,y,1.35,color=colors,align="center",alpha=0.7, yerr=updownerror)
    xticklabelpos.append(3.0 + offsetx)
    offsetx += nmethods*2.0

plt.xticks(xticklabelpos, metrics, rotation="0")
plt.ylabel("Mean score and standard deviation", fontsize=21)

leg = plt.legend(methods, loc=9, ncol=3, fontsize=18)
patches = leg.get_patches()
for (patch, col) in zip(patches,colors):
    patch.set_facecolor(col)

plt.gca().set_ylim([0.3,1.14])
plt.title("Structure prediction benchmarks (N=%d)" % nstructures)

#savefig("benchmarksprediction.svg")
plt.show()
